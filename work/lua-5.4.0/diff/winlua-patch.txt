2c2
< ** $Id: lauxlib.c,v 1.289 2016/12/20 18:37:00 roberto Exp $
---
> ** $Id: lauxlib.c,v 1.294 2018/02/27 18:47:32 roberto Exp $
79c79
<     if (strncmp(name, "_G.", 3) == 0) {  /* name start with '_G.'? */
---
>     if (strncmp(name, LUA_GNAME ".", 3) == 0) {  /* name start with '_G.'? */
276,280c276
<   if (stat == -1
< #if defined(LUA_USE_WINDOWS)
<       && errno != 0
< #endif
<       )  /* error? */
---
>   if (stat == -1)  /* error? */
487c483
<   UBox *box = (UBox *)lua_newuserdata(L, sizeof(UBox));
---
>   UBox *box = (UBox *)lua_newuserdatauv(L, sizeof(UBox), 0);
490c486
<   if (luaL_newmetatable(L, "LUABOX")) {  /* creating metatable? */
---
>   if (luaL_newmetatable(L, "_UBOX*")) {  /* creating metatable? */
851,931d846
< 
< /*
< ** {======================================================
< ** Compatibility with 5.1 module functions
< ** =======================================================
< */
< #if defined(LUA_COMPAT_MODULE)
< 
< static const char *luaL_findtable (lua_State *L, int idx,
<                                    const char *fname, int szhint) {
<   const char *e;
<   if (idx) lua_pushvalue(L, idx);
<   do {
<     e = strchr(fname, '.');
<     if (e == NULL) e = fname + strlen(fname);
<     lua_pushlstring(L, fname, e - fname);
<     if (lua_rawget(L, -2) == LUA_TNIL) {  /* no such field? */
<       lua_pop(L, 1);  /* remove this nil */
<       lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
<       lua_pushlstring(L, fname, e - fname);
<       lua_pushvalue(L, -2);
<       lua_settable(L, -4);  /* set new table into field */
<     }
<     else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
<       lua_pop(L, 2);  /* remove table and value */
<       return fname;  /* return problematic part of the name */
<     }
<     lua_remove(L, -2);  /* remove previous table */
<     fname = e + 1;
<   } while (*e == '.');
<   return NULL;
< }
< 
< 
< /*
< ** Count number of elements in a luaL_Reg list.
< */
< static int libsize (const luaL_Reg *l) {
<   int size = 0;
<   for (; l && l->name; l++) size++;
<   return size;
< }
< 
< 
< /*
< ** Find or create a module table with a given name. The function
< ** first looks at the LOADED table and, if that fails, try a
< ** global variable with that name. In any case, leaves on the stack
< ** the module table.
< */
< LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,
<                                  int sizehint) {
<   luaL_findtable(L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE, 1);
<   if (lua_getfield(L, -1, modname) != LUA_TTABLE) {  /* no LOADED[modname]? */
<     lua_pop(L, 1);  /* remove previous result */
<     /* try global variable (and create one if it does not exist) */
<     lua_pushglobaltable(L);
<     if (luaL_findtable(L, 0, modname, sizehint) != NULL)
<       luaL_error(L, "name conflict for module '%s'", modname);
<     lua_pushvalue(L, -1);
<     lua_setfield(L, -3, modname);  /* LOADED[modname] = new table */
<   }
<   lua_remove(L, -2);  /* remove LOADED table */
< }
< 
< 
< LUALIB_API void luaL_openlib (lua_State *L, const char *libname,
<                                const luaL_Reg *l, int nup) {
<   luaL_checkversion(L);
<   if (libname) {
<     luaL_pushmodule(L, libname, libsize(l));  /* get/create library table */
<     lua_insert(L, -(nup + 1));  /* move library table to below upvalues */
<   }
<   if (l)
<     luaL_setfuncs(L, l, nup);
<   else
<     lua_pop(L, nup);  /* remove upvalues */
< }
< 
< #endif
< /* }====================================================== */
2c2
< ** $Id: liolib.c,v 2.151 2016/12/20 18:37:00 roberto Exp $
---
> ** $Id: liolib.c,v 2.156 2018/03/02 18:25:00 roberto Exp $
189c189
<   LStream *p = (LStream *)lua_newuserdata(L, sizeof(LStream));
---
>   LStream *p = (LStream *)lua_newuserdatauv(L, sizeof(LStream), 0);
208a209,214
> static int f_close (lua_State *L) {
>   tofile(L);  /* make sure argument is an open stream */
>   return aux_close(L);
> }
> 
> 
212,213c218
<   tofile(L);  /* make sure argument is an open stream */
<   return aux_close(L);
---
>   return f_close(L);
267,269d271
< #if defined(LUA_USE_WINDOWS)
<   errno = 0;
< #endif
448c450
<   test2(&rn, "-+");  /* optional signal */
---
>   test2(&rn, "-+");  /* optional sign */
457c459
<     test2(&rn, "-+");  /* exponent signal */
---
>     test2(&rn, "-+");  /* exponent sign */
529,530c531
<   int success;
<   int n;
---
>   int n, success;
534c535
<     n = first+1;  /* to return 1 result */
---
>     n = first + 1;  /* to return 1 result */
536c537,538
<   else {  /* ensure stack space for all results and for auxlib's buffer */
---
>   else {
>     /* ensure stack space for all results and for auxlib's buffer */
718c720
<   {"close", io_close},
---
>   {"close", f_close},
2c2
< ** $Id: loslib.c,v 1.65 2016/07/18 17:58:58 roberto Exp $
---
> ** $Id: loslib.c,v 1.66 2017/03/14 12:40:44 roberto Exp $
143,147c143
<   int stat;
< #if defined(LUA_USE_WINDOWS)
<   errno = 0;
< #endif
<   stat = system(cmd);
---
>   int stat = system(cmd);
300c296,297
<     luaL_error(L, "time result cannot be represented in this installation");
---
>     return luaL_error(L,
>                  "time result cannot be represented in this installation");
347c344,345
<     luaL_error(L, "time result cannot be represented in this installation");
---
>     return luaL_error(L,
>                   "time result cannot be represented in this installation");
8c8
< #define LUA_LIB
---
> 
602,603c602,603
< /*2018-05-10 - WinLua modification*/
< LUA_API int mainL (int argc, char **argv) {
---
> 
> int main (int argc, char **argv) {
618a619
> 
220,221d219
< /*2018-05-10 - WinLua modification*/
< LUA_API int (mainL) (int argc, char **argv);
